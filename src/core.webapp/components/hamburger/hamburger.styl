// Settings
// ==================================================
hamburger-padding-x                       = 16px
hamburger-padding-y                       = 16px
hamburger-layer-width                     = 24px
hamburger-layer-height                    = 3px
hamburger-layer-spacing                   = 4px //6
hamburger-layer-color                     = #f9d21d
hamburger-layer-border-radius             = 2px //4px
hamburger-hover-opacity                   = 0.7
hamburger-hover-transition-duration       = 0.15s
hamburger-hover-transition-timing-function: linear

// To use CSS filters as the hover effect instead of opacity,
// set hamburger-hover-use-filter as true and
// change the value of hamburger-hover-filter accordingly.
hamburger-hover-use-filter= false
hamburger-hover-filter    = opacity(50%)

// Hamburger
// ==================================================
.hamburger {
  padding: hamburger-padding-y hamburger-padding-x
  display: block
  cursor: pointer

  transition-property: opacity, filter
  transition-duration: hamburger-hover-transition-duration
  transition-timing-function: hamburger-hover-transition-timing-function

  // Normalize (<button>)
  font: inherit
  color: inherit
  text-transform: none
  background-color: transparent
  border: 0
  margin: 0
  overflow: visible

  &:hover {
    // if hamburger-hover-use-filter is true
    filter: hamburger-hover-filter
    // opacity: hamburger-hover-opacity
  }
}

.hamburger-box {
  width: hamburger-layer-width
  height: hamburger-layer-height * 3 + hamburger-layer-spacing * 2
  display: inline-block
  position: relative
}

.hamburger-inner {
  display: block
  // top: 50%
  margin-top: hamburger-layer-height / -2

  &,
  &::before,
  &::after {
    width: hamburger-layer-width
    height: hamburger-layer-height
    background-color: hamburger-layer-color
    border-radius: hamburger-layer-border-radius
    position: absolute
    transition-property: transform
    transition-duration: 0.15s
    transition-timing-function: ease
  }

  &::before,
  &::after {
    content: ""
    display: block
  }

  &::before {
    top: (hamburger-layer-spacing + hamburger-layer-height) * -1
  }

  &::after {
    bottom: (hamburger-layer-spacing + hamburger-layer-height) * -1
  }
}

 /*
  * 3DX
  */
.hamburger--3dx {
  .hamburger-box {
    perspective: hamburger-layer-width * 2
  }

  .hamburger-inner {
    transition: transform 0.15s cubic-bezier(0.645, 0.045, 0.355, 1),
                background-color 0s 0.1s cubic-bezier(0.645, 0.045, 0.355, 1)

    &::before,
    &::after {
      transition: transform 0s 0.1s cubic-bezier(0.645, 0.045, 0.355, 1)
    }
  }

  &.is-active {
    .hamburger-inner {
      background-color: transparent
      transform: rotateY(180deg)

      &::before {
        transform: translate3d(0, hamburger-layer-height + hamburger-layer-spacing, 0) rotate(45deg)
      }

      &::after {
        transform: translate3d(0, (hamburger-layer-height + hamburger-layer-spacing) * -1, 0) rotate(-45deg)
      }
    }
  }
}